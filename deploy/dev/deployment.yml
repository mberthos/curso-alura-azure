kind: Deployment
apiVersion: apps/v1
metadata:
  name: _APP_NAME_
  namespace: _NAMESPACE_
  labels:
    tags.datadoghq.com/env: "dev"
    tags.datadoghq.com/service: "_APP_NAME_"
    tags.datadoghq.com/version: "_IMAGE_VERSION_"
spec:
  selector:
    matchLabels:
      app: _APP_NAME_
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
      labels:
        app: _APP_NAME_
        version: _APP_NAME_
        tags.datadoghq.com/env: "dev"
        tags.datadoghq.com/service: "_APP_NAME_"
        tags.datadoghq.com/version: "_IMAGE_VERSION_"
    spec:
      containers:
        - name: _APP_NAME_
          image: minutrade/_APP_NAME_:_IMAGE_VERSION_
          ports:
            - containerPort: _PORT_
              protocol: TCP
          env:
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_PROFILING_ENABLED
              value: "true"
          volumeMounts:
            - mountPath: "/app/secrets"
              name: _APP_NAME_-secrets #envs-mounted-by-awssm
              readOnly: true
            - mountPath: "/app/configs"
              name: _APP_NAME_-configs #envs-mounted-by-awssm
              readOnly: true
          resources:
            limits:
              cpu: _LIMITS_CPU_
              memory: _LIMITS_MEMORY_
            requests:
              cpu: _REQUESTS_CPU_
              memory: _REQUESTS_MEMORY_
          livenessProbe:
            httpGet:
              path: /_HEALTHCHECKLIVE_
              port: _PORT_
              scheme: HTTP
            timeoutSeconds: 60
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            initialDelaySeconds: 5
          readinessProbe:
            httpGet:
              path: /_HEALTHCHECKREADY_
              port: _PORT_
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 60
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      imagePullSecrets:
        - name: dockerhub.registry
      dnsConfig:
        options:
          - name: ndots
            value: "2"
      nodeSelector:
        Zone: sec
      volumes:
        - name: _APP_NAME_-secrets #envs-mounted-by-awssm
          secret:
            secretName: _APP_NAME_-secrets
        - name: _APP_NAME_-configs #envs-mounted-by-awssm
          secret:
            secretName: _APP_NAME_-configs
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 50%
      maxSurge: 50%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: _APP_NAME_
  namespace: _NAMESPACE_
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: _APP_NAME_
  minReplicas: _HPA_MIN_
  maxReplicas: _HPA_MAX_
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          # scale up if usage is above
          # 99% of the requested CPU (100m)
          averageUtilization: 80
---
apiVersion: v1
kind: Service
metadata:
  name: _APP_NAME_
  namespace: _NAMESPACE_
  labels:
    app: _APP_NAME_
    service: _APP_NAME_
spec:
  ports:
    - name: http
      port: _PORT_      
  selector:
    app: _APP_NAME_
